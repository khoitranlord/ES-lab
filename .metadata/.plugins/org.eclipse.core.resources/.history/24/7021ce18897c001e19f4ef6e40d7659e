/*
 * fsm_button_processing.c
 *
 *  Created on: Nov 6, 2023
 *      Author: khoitran
 */


#include "fsm_button_processing.h"
#include "fsm_trafficlight.h"

#define MODE_BTN 	0
#define INC_BTN		1
#define DEC_BTN		2
#define PEDES_BTN	3

enum StateButton{
	INITBTN,
	NORMAL,
	MODE,
	INC,
	DEC,
	HOLD_MODE,
	PEDES
};

enum ChangeTimeStatus {
	RED_CHANGE,
	YELLOW_CHANGE,
	GREEN_CHANGE,
	CONFIRM
};

enum StateLight currentStateVER = INIT;
enum StateLight currentStateHOR = INIT;
enum StateButton statusBTN = INITBTN;
enum ChangeTimeStatus changeTimeState = RED_CHANGE;
enum ChangeTimeStatus manualDisplay = RED_CHANGE;
enum StateLight State = RED;
int trafficTime[3] = {9,3,6};
int trafficRealTime[3];
int indexOfLight = REDVERFLAG;
int flag = 0;

void incTime(int index){
	switch(index){
		case RED_CHANGE: trafficTime[GREEN_CHANGE]++; break;
		case YELLOW_CHANGE: trafficTime[RED_CHANGE]++; break;
		case GREEN_CHANGE: trafficTime[RED_CHANGE]++; break;
	}
	trafficTime[index]++;
}
void decTime(int index){
	switch(index){
		case RED_CHANGE: trafficTime[GREEN_CHANGE]--; break;
		case YELLOW_CHANGE: trafficTime[RED_CHANGE]--; break;
		case GREEN_CHANGE: trafficTime[RED_CHANGE]--; break;
	}
	trafficTime[index]--;
}

void translate(void){
	for(int i = 0; i < 3; i++){
		trafficRealTime[i] = trafficTime[i] * 1000;
	}
}

void fsm_button_displayTraffic(void){
	switch(statusBTN){
	case INITBTN:
		currentStateVER = INIT;
		currentStateHOR = INIT;
		statusBTN = NORMAL;
		break;
	case NORMAL:
		translate();
		displayTraffic(trafficRealTime);

		if(isButtonPressed(MODE_BTN)){
			statusBTN = MODE;
		}
		if(isButtonHold(MODE_BTN)){
			statusBTN = HOLD_MODE;
		}
		if(isButtonPressed(PEDES_BTN)){
			statusBTN = PEDES;
		}
		break;
	case MODE:
		setTimer(BLINK,10);

		if(changeTimeState == CONFIRM){
			if(timer_flag[BLINK]){
				if(flag == 0){
					blinkyLight(RED);
					flag = 1;
				}else if(flag == 1){
					blinkyLight(YELLOW);
					flag = 2;
				}else {
					blinkyLight(GREEN);
					flag = 0;
				}
				setTimer(BLINK,30);
			}

			if(isButtonPressed(MODE_BTN)){
				changeTimeState = RED_CHANGE;
				statusBTN = INITBTN;
			}

		}else {
		blinkyLight(State);
			if(isButtonPressed(MODE_BTN)){
				switch(changeTimeState){
					case RED_CHANGE:
						State = YELLOW;
						indexOfLight = YELLOWVERFLAG;
						changeTimeState = YELLOW_CHANGE;
						break;
					case YELLOW_CHANGE:
						State = GREEN;
						indexOfLight = GREENVERFLAG;
						changeTimeState = GREEN_CHANGE;
						break;
					case GREEN_CHANGE:
						State = RED;
						indexOfLight = REDVERFLAG;
						changeTimeState = CONFIRM;
						break;
					case CONFIRM: break;
				}
			}
			if(isButtonPressed(INC_BTN)) statusBTN = INC;
			if(isButtonPressed(DEC_BTN)) statusBTN = DEC;
		}

		break;
	case INC:
		incTime(indexOfLight);
		statusBTN = MODE;
		break;
	case DEC:
		decTime(indexOfLight);
		statusBTN = MODE;
		break;
	case HOLD_MODE:

		switch(manualDisplay){
		case RED_CHANGE:
			turnOnLight(RED,VER);
			turnOnLight(RED,HOR);
			break;
		case YELLOW_CHANGE:
			turnOnLight(YELLOW,VER);
			turnOnLight(YELLOW,HOR);
			break;
		case GREEN_CHANGE:
			turnOnLight(GREEN,VER);
			turnOnLight(GREEN,HOR);
			break;
		case CONFIRM: break;
		}

		if(isButtonPressed(MODE_BTN)){
			switch(manualDisplay){
				case RED_CHANGE: manualDisplay = YELLOW_CHANGE; break;
				case YELLOW_CHANGE: manualDisplay = GREEN_CHANGE; break;
				case GREEN_CHANGE: manualDisplay = RED_CHANGE; break;
				case CONFIRM: break;
			}
		}

		if(isButtonHold(MODE_BTN)){
			statusBTN = INITBTN;
		}
		break;
	case PEDES:
		setTimer(BLINK,10);
		blinkyPedes();
		if(timer_flag[BLINK]){
			if(flag == 0){
				blinkyLight(RED);
				flag = 1;
			}else if(flag == 1){
				blinkyLight(YELLOW);
				flag = 2;
			}else {
				blinkyLight(GREEN);
				flag = 0;
			}
			setTimer(BLINK,30);
		}
		if (isButtonPressed(PEDES_BTN)){
			clearPedes();
			statusBTN= INITBTN;
		}
		break;
	}
}
